// src/store.ts
import { combineReducers, configureStore, createSlice } from "@reduxjs/toolkit";
import productReducer from "./slices/productSlice";
import cartReducer from "./slices/CartSlice";
import { setupListeners } from "@reduxjs/toolkit/query";
import userReducer from "./slices/userSlice";
import shippingReducer from "./slices/shippingSlice";
import paymentReducer from "./slices/paymentSlice";
import { persistStore, persistReducer } from "redux-persist";
import storage from "redux-persist/lib/storage";
import orderReducer from "./slices/orderSlice";
import paypalReducer from "./slices/paypalSlice";

import {
  FLUSH,
  REHYDRATE,
  PAUSE,
  PERSIST,
  PURGE,
  REGISTER,
} from "redux-persist";

// Define the shape of your app's state
type ModeState = {
  mode: "light" | "dark";
};

// Create a slice for the mode state
const modeSlice = createSlice({
  name: "mode",
  initialState: {
    mode:
      (localStorage.getItem("mode") as "light" | "dark") ||
      (window.matchMedia?.("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light"),
  } as ModeState,
  reducers: {
    switchMode(state) {
      const newMode = state.mode === "dark" ? "light" : "dark";
      localStorage.setItem("mode", newMode);
      state.mode = newMode;
    },
  },
});

// Export actions generated by createSlice
export const { switchMode } = modeSlice.actions;

// Configure persistence
const persistConfig = {
  key: "root",
  version: 1,
  storage,
};

// Combine all your reducers, including modeSlice
const rootReducer = combineReducers({
  products: productReducer,
  cart: cartReducer,
  user: userReducer,
  shipping: shippingReducer,
  payment: paymentReducer,
  mode: modeSlice.reducer,
  order: orderReducer,
  paypal: paypalReducer,
});

// Create a persisted reducer
const persistedReducer = persistReducer(persistConfig, rootReducer);

// Configure the Redux store
export const store = configureStore({
  reducer: persistedReducer,
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: {
        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],
      },
    }),
});

// Create a persistor
export const persistor = persistStore(store);

// Setup listeners for RTK Query
setupListeners(store.dispatch);

// Define RootState type for usage in selectors
export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;
